name: Continuous integration and continuous deployment

on:
  push:
    branches: [ main ]
    # tags:
    #   - '*'

jobs:
  build-angular:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Caching node_modules
        uses: actions/cache@v3
        with:
          path: ./App/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/packages.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules

      - name: Build Angular
        run: |
          cd /home/runner/work/EvseProject/EvseProject/App
          yarn install
          yarn prod

  build-dotnet:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '5.0.x'

      - name: Restore NuGet Packages
        run: dotnet restore

      - name: Build .NET Core
        run: dotnet build --configuration Release

      - name: Publish .NET Core
        run: dotnet publish --configuration Release --output ./publish

  deploy-to-iis:
    needs: [build-angular, build-dotnet]
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dotnet-publish
          path: ./publish/evse_api

      - name: Copy Angular build to .NET Core wwwroot
        run: cp -a ./App/dist/evse ./publish/evse_api/wwwroot/ClientApp

      - name: Deploy to IIS
        run: |
          # Use PowerShell to deploy to IIS
          $iisSiteName = "Evse"
          $physicalPath = "C:\path\to\publish\evse_api"

          Import-Module WebAdministration
          $appPoolExists = Test-Path "IIS:\AppPools\$iisSiteName"
          if (-not $appPoolExists) {
            New-Item "IIS:\AppPools\$iisSiteName" -ErrorAction Stop
          }

          Set-ItemProperty "IIS:\AppPools\$iisSiteName" -Name "managedRuntimeVersion" -Value ""
          Set-ItemProperty "IIS:\AppPools\$iisSiteName" -Name "managedPipelineMode" -Value 0

          $iisSiteExists = Test-Path "IIS:\Sites\$iisSiteName"
          if (-not $iisSiteExists) {
            New-Item "IIS:\Sites\$iisSiteName" -ErrorAction Stop
          }

          Set-ItemProperty "IIS:\Sites\$iisSiteName" -Name "physicalPath" -Value $physicalPath

          $binding = @{
            Protocol = "http"
            Port = 80
            IPAddress = "192.168.64.1"
            HostHeader = "evse.acv-vision.com"
          }

          New-WebBinding -Name $iisSiteName -BindingInformation "$($binding.IPAddress):$($binding.Port):" -HostHeader $binding.HostHeader -Protocol $binding.Protocol

          Start-WebAppPool -Name $iisSiteName
          Start-WebSite -Name $iisSiteName
