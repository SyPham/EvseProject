import { ActionConstant, MessageConstants, StatusConstants } from '../../_core/_constants';
export class BaseComponent {
    constructor(translate, url) {
        var _a;
        this.translate = translate;
        this.url = url;
        this.statusConts = new StatusConstants();
        this.isodsExport = true;
        this.globalLang = localStorage.getItem('lang');
        this.skip = 0;
        this.take = 10;
        this.sortOptions = { columns: [{ field: 'estDate', direction: 'Descending' }, { field: 'id', direction: 'Descending' }] };
        this.isAdmin = ((_a = JSON.parse(localStorage.getItem('user'))) === null || _a === void 0 ? void 0 : _a.groupCode) === 'ADMIN';
        this.baseUrl = '';
        this.alert = {
            updateMessage: this.translate.instant(MessageConstants.UPDATE_MESSAGE),
            updateTitle: this.translate.instant(MessageConstants.UPDATE_TITLE),
            createMessage: this.translate.instant(MessageConstants.CREATE_MESSAGE),
            createTitle: this.translate.instant(MessageConstants.CREATE_TITLE),
            deleteMessage: this.translate.instant(MessageConstants.DELETE_MESSAGE),
            deleteTitle: this.translate.instant(MessageConstants.DELETE_TITLE),
            cancelMessage: this.translate.instant(MessageConstants.CANCEL_MESSAGE),
            serverError: this.translate.instant(MessageConstants.SERVER_ERROR),
            deleted_ok_msg: this.translate.instant(MessageConstants.DELETED_OK_MSG),
            created_ok_msg: this.translate.instant(MessageConstants.CREATED_OK_MSG),
            updated_ok_msg: this.translate.instant(MessageConstants.UPDATED_OK_MSG),
            system_error_msg: this.translate.instant(MessageConstants.SYSTEM_ERROR_MSG),
            exist_message: this.translate.instant(MessageConstants.EXIST_MESSAGE),
            choose_farm_message: this.translate.instant(MessageConstants.CHOOSE_FARM_MESSAGE),
            select_order_message: this.translate.instant(MessageConstants.SELECT_ORDER_MESSAGE),
            yes_message: this.translate.instant(MessageConstants.YES_MSG),
            no_message: this.translate.instant(MessageConstants.NO_MSG),
        };
        this.validationGrid = {
            requireField: 'This field is require.',
            textLength: 'Text Length',
        };
        this.editSettingsTree = { allowEditing: false, allowAdding: false, allowDeleting: false, newRowPosition: 'Child', mode: 'Row' };
        this.editSettings = { showDeleteConfirmDialog: false, allowEditing: false, allowAdding: false, allowDeleting: false, mode: 'Normal' };
        this.toolbarOptions = ['ExcelExport', 'Add', 'Edit', 'Delete', 'Cancel', 'Search'];
        this.toolbarOptionsTree = [
            'Add',
            'Delete',
            'Search',
            'ExpandAll',
            'CollapseAll',
            'ExcelExport'
        ];
        this.contextMenuItems = [
            {
                text: 'Add Child',
                iconCss: ' e-icons e-add',
                target: '.e-content',
                id: 'Add-Sub-Item'
            },
            {
                text: 'Delete',
                iconCss: ' e-icons e-delete',
                target: '.e-content',
                id: 'DeleteOC'
            }
        ];
        this.average = (nums) => {
            if (nums.length === 0)
                return 0;
            if (nums.length > 0 && nums) {
                nums = nums.filter(e => e !== null);
                if (nums.length === 0)
                    return 0;
                return nums.reduce((a, b) => (a + b)) / nums.length;
            }
            return 0;
        };
        this.total = (nums) => {
            if (nums.length === 0)
                return 0;
            if (nums.length > 0 && nums) {
                nums = nums.filter(e => e !== null);
                if (nums.length === 0)
                    return 0;
                return nums.reduce((a, b) => (a + b));
            }
            return 0;
        };
        this.baseUrl = url;
        let user = JSON.parse(localStorage.getItem('user'));
        let pageSize = Number(user === null || user === void 0 ? void 0 : user.pageSizeSettingValue) || 10;
        let pageSizesTemp = (user === null || user === void 0 ? void 0 : user.pageSizeSettingList) || ['5', '10', '12', '20'];
        let pageSizes = pageSizesTemp.map(x => {
            if (isNaN(+x))
                return x;
            return +x;
        });
        this.pageSettings = { pageSizes: pageSizes, enableQueryString: true, pageSize: pageSize, currentPage: 1, enableScroll: true };
        this.take = this.pageSettings.pageSize;
    }
    Permission(route) {
        const functionCode = route.snapshot.data.functionCode;
        this.functions = JSON.parse(localStorage.getItem('functions')).filter(x => x.functionCode === functionCode) || [];
        for (const item of this.functions) {
            const toolbarOptions = [];
            for (const action of item.childrens) {
                const optionItem = this.makeAction(action.code);
                toolbarOptions.push(...optionItem.filter(Boolean));
            }
            toolbarOptions.push('Search');
            const uniqueOptionItem = toolbarOptions.filter((elem, index, self) => {
                return index === self.indexOf(elem);
            });
            this.toolbarOptions = uniqueOptionItem;
        }
    }
    PermissionForTreeGrid(route) {
        this.contextMenuItems = [];
        this.functions = JSON.parse(localStorage.getItem('functions'));
        for (const item of this.functions) {
            if (route.snapshot.data.functionCode.includes(item.functionCode)) {
                const toolbarOptionsTree = [];
                for (const action of item.childrens) {
                    const optionItem = this.makeActionTreeGrid(action.code);
                    toolbarOptionsTree.push(...optionItem.filter(Boolean));
                }
                toolbarOptionsTree.push(...['Search',
                    'ExpandAll',
                    'CollapseAll',
                    'ExcelExport']);
                const uniqueOptionItem = toolbarOptionsTree.filter((elem, index, self) => {
                    return index === self.indexOf(elem);
                });
                this.toolbarOptionsTree = uniqueOptionItem;
                break;
            }
        }
    }
    // Đổi action code thanh action của ej2-grid
    makeAction(input) {
        switch (input) {
            case ActionConstant.CREATE:
                this.editSettings.allowAdding = true;
                return ['Add'];
            case ActionConstant.EDIT:
                this.editSettings.allowEditing = false;
                return [];
            case ActionConstant.DELETE:
                this.editSettings.allowDeleting = false;
                return [];
            case ActionConstant.EXCEL_EXPORT:
                return ['ExcelExport'];
            default:
                return [undefined];
        }
    }
    makeActionTreeGrid(input) {
        switch (input) {
            case ActionConstant.EXCEL_EXPORT:
                return ['ExcelExport'];
            case ActionConstant.CREATE:
                this.editSettingsTree.allowAdding = true;
                this.contextMenuItems.push({
                    text: 'Add Child',
                    iconCss: ' e-icons e-add',
                    target: '.e-content',
                    id: 'Add-Sub-Item'
                });
                return ['Add'];
            case ActionConstant.EDIT:
                this.editSettingsTree.allowEditing = false;
                return [undefined];
            case ActionConstant.DELETE:
                this.editSettingsTree.allowDeleting = false;
                this.contextMenuItems.push({
                    text: 'Delete',
                    iconCss: ' e-icons e-delete',
                    target: '.e-content',
                    id: 'DeleteOC'
                });
                return [undefined];
            default:
                return [undefined];
        }
    }
    convertDate(data) {
        if (data instanceof Date) {
            return data.toLocaleDateString();
        }
        return data;
    }
    visibledApply(model) {
        return !(model.id > 0) || !model.applyDate;
    }
    visibledAgree(model) {
        return model.id > 0 && !model.agreeGuid && model.status === this.statusConts.Default;
    }
    visibledReject(model) {
        return model.id > 0 && (model.status === this.statusConts.Agree || model.status === this.statusConts.Default);
    }
    visibledExecute(model) {
        return model.id > 0 && (model.status === this.statusConts.Agree || model.status === this.statusConts.Default);
    }
    visibledInventory(model) {
        return model.id > 0 && (model.status === this.statusConts.Agree || model.status === this.statusConts.Default);
    }
    visibledFinance(model) {
        return model.id > 0 && (model.status === this.statusConts.Agree || model.status === this.statusConts.Default);
    }
    disabledApplyReason(model) {
        return model.id > 0;
    }
    disabledAgreeReason(model) {
        return model.status === this.statusConts.Agree || model.status === this.statusConts.Execute || model.status === this.statusConts.Reject;
    }
    disabledRejectReason(model) {
        return model.status === this.statusConts.Agree || model.status === this.statusConts.Execute || model.status === this.statusConts.Reject;
    }
}
//# sourceMappingURL=data:application/json;base64,