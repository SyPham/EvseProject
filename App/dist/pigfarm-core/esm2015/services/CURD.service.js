import { HttpClient, HttpHeaders } from "@angular/common/http";
import { Inject, Injectable } from "@angular/core";
import { catchError } from "rxjs/operators";
import { UtilitiesService } from "../services";
import { BaseService } from "./base.service";
export class CURDService extends BaseService {
    //#endregion
    //#region Ctor
    constructor(env, http, entity, utilitiesService) {
        super();
        this.env = env;
        this.http = http;
        this.entity = entity;
        this.utilitiesService = utilitiesService;
        this.audits = ["updateDate", "createDate", "deleteDate", "lastLoginDate"];
        this.base = this.env;
        //#region Field
        this._sharedHeaders = new HttpHeaders();
        this._sharedHeaders = this._sharedHeaders.set("Content-Type", "application/json");
    }
    //#endregion
    //#region LoadData
    getAll() {
        return this.http
            .get(`${this.base}${this.entity}/getall`, {})
            .pipe(catchError(this.handleError));
    }
    getById(id) {
        return this.http
            .get(`${this.base}${this.entity}/getById?id=${id}`, {})
            .pipe(catchError(this.handleError));
    }
    //#endregion
    //#region Action
    insertWithFormData(model) {
        const params = this.utilitiesService.ToFormData(model);
        return this.http
            .post(`${this.base}${this.entity}/insert`, params)
            .pipe(catchError(this.handleError));
    }
    updateWithFormData(model) {
        const params = this.utilitiesService.ToFormData(model);
        return this.http
            .put(`${this.base}${this.entity}/update`, params)
            .pipe(catchError(this.handleError));
    }
    add(model) {
        for (const audit of this.audits) {
            let value2 = model[audit];
            if (value2 instanceof Date) {
                model[audit] = `${value2.toLocaleDateString()} ${value2.toLocaleTimeString("en-GB")}`;
            }
        }
        return this.http.post(`${this.base}${this.entity}/add`, model);
    }
    addRange(model) {
        for (const audit of this.audits) {
            for (const ml of model) {
                let value2 = model[audit];
                if (value2 instanceof Date) {
                    model[audit] = `${value2.toLocaleDateString()} ${value2.toLocaleTimeString("en-GB")}`;
                }
            }
        }
        return this.http
            .post(`${this.base}${this.entity}/addRange`, model)
            .pipe(catchError(this.handleError));
    }
    updateRange(model) {
        for (const audit of this.audits) {
            for (const ml of model) {
                let value2 = model[audit];
                if (value2 instanceof Date) {
                    model[audit] = `${value2.toLocaleDateString()} ${value2.toLocaleTimeString("en-GB")}`;
                }
            }
        }
        return this.http
            .put(`${this.base}${this.entity}/updateRange`, model)
            .pipe(catchError(this.handleError));
    }
    update(model) {
        for (const audit of this.audits) {
            let value2 = model[audit];
            if (value2 instanceof Date) {
                model[audit] = `${value2.toLocaleDateString()} ${value2.toLocaleTimeString("en-GB")}`;
            }
        }
        return this.http.put(`${this.base}${this.entity}/update`, model);
    }
    updatestatus(id) {
        return this.http
            .put(`${this.base}${this.entity}/updatestatus?id=${id}`, {})
            .pipe(catchError(this.handleError));
    }
    delete(id) {
        return this.http.delete(`${this.base}${this.entity}/delete?id=${id}`);
    }
    deleterange(ids) {
        let query = "";
        for (const id of ids) {
            query += `id=${id}&`;
        }
        return this.http
            .delete(`${this.base}${this.entity}/deleterange?${query}`)
            .pipe(catchError(this.handleError));
    }
    //#endregion
    getAudit(id) {
        return this.http.get(`${this.base}${this.entity}/GetAudit?id=${id}`, {});
    }
    downloadODSFile(model) {
        const params = this.utilitiesService.ToFormData(model);
        return this.http.post(`${this.base}Files/ExcelExportToDOS`, params, {
            responseType: "blob",
            observe: "response",
        });
    }
    downloadExcelFile(recordGuid) {
        return this.http.get(`${this.base}Files/DownloadTemplateFile?recordGuid=${recordGuid}`, {
            responseType: "blob",
            observe: "response",
        });
    }
    excelExportRecordSale(p) {
        return this.http.post(`${this.base}Files/ExcelExportRecordSale`, p, {
            responseType: "blob",
            observe: "response",
        });
    }
    downloadBlob(data, fileName, mimeType) {
        var blob, url;
        blob = new Blob([data], {
            type: mimeType,
        });
        url = window.URL.createObjectURL(blob);
        var a;
        a = document.createElement("a");
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.style = "display: none";
        a.click();
        a.remove();
        setTimeout(function () {
            return window.URL.revokeObjectURL(url);
        }, 1000);
    }
}
CURDService.decorators = [
    { type: Injectable }
];
CURDService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ["Env",] }] },
    { type: HttpClient },
    { type: String, decorators: [{ type: Inject, args: [String,] }] },
    { type: UtilitiesService }
];
//# sourceMappingURL=data:application/json;base64,