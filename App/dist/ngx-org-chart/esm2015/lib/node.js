export class Node {
    constructor(structure, parent) {
        this.parent = parent;
        const [name, ...reports] = structure;
        this.name = name.split('(')[0].trim();
        const titleMatch = name.match(/\(([^)]+)\)/);
        this.title = titleMatch && titleMatch[1].trim();
        this.childs = reports.map(r => r.substring(1))
            .reduce((previous, current) => {
            if (!current.startsWith(' ')) {
                previous.push([]);
            }
            previous[previous.length - 1].push(current);
            return previous;
        }, [])
            .map(r => new Node(r, this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1vcmctY2hhcnQvc3JjL2xpYi9ub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE1BQU0sT0FBTyxJQUFJO0lBUWYsWUFBWSxTQUFtQixFQUFFLE1BQWE7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFaEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzVCLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDbkI7WUFFRCxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDNUMsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxFQUFFLEVBQWdCLENBQUM7YUFDbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJTm9kZSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGNzc0NsYXNzOiBzdHJpbmc7XHJcbiAgaW1hZ2U6IHN0cmluZztcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGNoaWxkczogSU5vZGVbXTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5vZGUgaW1wbGVtZW50cyBJTm9kZSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGNzc0NsYXNzOiBzdHJpbmc7XHJcbiAgaW1hZ2U6IHN0cmluZztcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGNoaWxkczogTm9kZVtdO1xyXG4gIHBhcmVudD86IE5vZGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHN0cnVjdHVyZTogc3RyaW5nW10sIHBhcmVudD86IE5vZGUpIHtcclxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgY29uc3QgW25hbWUsIC4uLnJlcG9ydHNdID0gc3RydWN0dXJlO1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZS5zcGxpdCgnKCcpWzBdLnRyaW0oKTtcclxuICAgIGNvbnN0IHRpdGxlTWF0Y2ggPSBuYW1lLm1hdGNoKC9cXCgoW14pXSspXFwpLyk7XHJcbiAgICB0aGlzLnRpdGxlID0gdGl0bGVNYXRjaCAmJiB0aXRsZU1hdGNoWzFdLnRyaW0oKTtcclxuXHJcbiAgICB0aGlzLmNoaWxkcyA9IHJlcG9ydHMubWFwKHIgPT4gci5zdWJzdHJpbmcoMSkpXHJcbiAgICAgIC5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCFjdXJyZW50LnN0YXJ0c1dpdGgoJyAnKSkge1xyXG4gICAgICAgICAgcHJldmlvdXMucHVzaChbXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXS5wdXNoKGN1cnJlbnQpO1xyXG4gICAgICAgIHJldHVybiBwcmV2aW91cztcclxuICAgICAgfSwgW10gYXMgc3RyaW5nW11bXSlcclxuICAgICAgLm1hcChyID0+IG5ldyBOb2RlKHIsIHRoaXMpKTtcclxuICB9XHJcbn1cclxuIl19