// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Evse.Models;

namespace Evse.Data
{
    public partial class EvseContext : DbContext
    {
        public EvseContext()
        {
        }

        public EvseContext(DbContextOptions<EvseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Account1> Accounts1 { get; set; }
        public virtual DbSet<Account2Permission> Account2Permissions { get; set; }
        public virtual DbSet<AccountGroup> AccountGroups { get; set; }
        public virtual DbSet<AccountPermission> AccountPermissions { get; set; }
        public virtual DbSet<AccountRole> AccountRoles { get; set; }
        public virtual DbSet<AccountSite> AccountSites { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Booking2Time> Booking2Times { get; set; }
        public virtual DbSet<BookingDetail> BookingDetails { get; set; }
        public virtual DbSet<BookingFruit> BookingFruits { get; set; }
        public virtual DbSet<BookingTypeC> BookingTypeCs { get; set; }
        public virtual DbSet<CodeHelp> CodeHelps { get; set; }
        public virtual DbSet<CodePermission> CodePermissions { get; set; }
        public virtual DbSet<CodePermission1> CodePermissions1 { get; set; }
        public virtual DbSet<CodeServiceType> CodeServiceTypes { get; set; }
        public virtual DbSet<CodeType> CodeTypes { get; set; }
        public virtual DbSet<CodeType1> CodeTypes1 { get; set; }
        public virtual DbSet<County> Counties { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Dashboard> Dashboards { get; set; }
        public virtual DbSet<DbPublicCodeType> DbPublicCodeTypes { get; set; }
        public virtual DbSet<DbPublicContact> DbPublicContacts { get; set; }
        public virtual DbSet<DbPublicCountyTownShip> DbPublicCountyTownShips { get; set; }
        public virtual DbSet<DbPublicFavorite> DbPublicFavorites { get; set; }
        public virtual DbSet<DbPublicMemo> DbPublicMemos { get; set; }
        public virtual DbSet<DbPublicNurse> DbPublicNurses { get; set; }
        public virtual DbSet<DbPublicPatient> DbPublicPatients { get; set; }
        public virtual DbSet<DbPublicPaymentCode> DbPublicPaymentCodes { get; set; }
        public virtual DbSet<DbPublicPhoto> DbPublicPhotos { get; set; }
        public virtual DbSet<DbPublicReaded> DbPublicReadeds { get; set; }
        public virtual DbSet<DbPublicWebPrint> DbPublicWebPrints { get; set; }
        public virtual DbSet<EmailPool> EmailPools { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Hall> Halls { get; set; }
        public virtual DbSet<HallTime> HallTimes { get; set; }
        public virtual DbSet<Method> Methods { get; set; }
        public virtual DbSet<MultiChoiceCountyTownShip> MultiChoiceCountyTownShips { get; set; }
        public virtual DbSet<MultiChoiceCountyTownShip1> MultiChoiceCountyTownShips1 { get; set; }
        public virtual DbSet<MultiChoicePaymentCode> MultiChoicePaymentCodes { get; set; }
        public virtual DbSet<Oc> Ocs { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Pricing> Pricings { get; set; }
        public virtual DbSet<PublicCodeType> PublicCodeTypes { get; set; }
        public virtual DbSet<PublicCountyTownShip> PublicCountyTownShips { get; set; }
        public virtual DbSet<PublicMemo> PublicMemos { get; set; }
        public virtual DbSet<PublicPaymentCode> PublicPaymentCodes { get; set; }
        public virtual DbSet<PublicReaded> PublicReadeds { get; set; }
        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<ReportConfig> ReportConfigs { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<StoredProcedure> StoredProcedures { get; set; }
        public virtual DbSet<SysConfig> SysConfigs { get; set; }
        public virtual DbSet<SysLogDuty> SysLogDuties { get; set; }
        public virtual DbSet<SysLogGp> SysLogGps { get; set; }
        public virtual DbSet<SysLogSp> SysLogSps { get; set; }
        public virtual DbSet<SysLogUser> SysLogUsers { get; set; }
        public virtual DbSet<SysMenu> SysMenus { get; set; }
        public virtual DbSet<SystemConfig> SystemConfigs { get; set; }
        public virtual DbSet<SystemConfig2> SystemConfig2s { get; set; }
        public virtual DbSet<SystemLanguage> SystemLanguages { get; set; }
        public virtual DbSet<SystemLogUser> SystemLogUsers { get; set; }
        public virtual DbSet<Township> Townships { get; set; }
        public virtual DbSet<UserConfig> UserConfigs { get; set; }
        public virtual DbSet<UserView> UserViews { get; set; }
        public virtual DbSet<WebMenu> WebMenus { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrder20220929> WorkOrder20220929s { get; set; }
        public virtual DbSet<XAccount> XAccounts { get; set; }
        public virtual DbSet<XAccountGroup> XAccountGroups { get; set; }
        public virtual DbSet<XAccountGroupPermission> XAccountGroupPermissions { get; set; }
        public virtual DbSet<XAccountPermission> XAccountPermissions { get; set; }
        public virtual DbSet<XAccountRole> XAccountRoles { get; set; }
        public virtual DbSet<XAccountSetting> XAccountSettings { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("Account");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGroup)
                    .HasColumnName("Account_Group")
                    .HasMaxLength(100);

                entity.Property(e => e.AccountLevel)
                    .HasColumnName("Account_Level")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AccountName)
                    .HasColumnName("Account_NAME")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountNo)
                    .HasColumnName("Account_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountRfid)
                    .HasColumnName("Account_RFID")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountRole)
                    .HasColumnName("Account_Role")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.HallGuid)
                    .HasColumnName("Hall_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Lastlogin)
                    .HasColumnName("lastlogin")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lastuse)
                    .HasColumnName("lastuse")
                    .HasColumnType("datetime");

                entity.Property(e => e.LicensePath)
                    .HasColumnName("License_Path")
                    .HasMaxLength(200);

                entity.Property(e => e.PageSizeSetting)
                    .HasColumnName("PageSize_Setting")
                    .HasMaxLength(10);

                entity.Property(e => e.PhotoPath)
                    .HasColumnName("Photo_Path")
                    .HasMaxLength(100);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Uid)
                    .HasColumnName("UID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upwd)
                    .HasColumnName("UPWD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Account1>(entity =>
            {
                entity.ToTable("Accounts");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountGroupId).HasColumnName("AccountGroupID");

                entity.Property(e => e.AccountRole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AccountTypeId).HasColumnName("AccountTypeID");

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Guid).HasMaxLength(40);

                entity.Property(e => e.LicensePath).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(10);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasMaxLength(20);

                entity.Property(e => e.Ocid).HasColumnName("OCID");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.PhotoPath).HasMaxLength(100);

                entity.Property(e => e.Rfid)
                    .HasColumnName("RFID")
                    .HasMaxLength(20);

                entity.Property(e => e.Username).HasMaxLength(50);

                entity.HasOne(d => d.AccountType)
                    .WithMany(p => p.Account1s)
                    .HasForeignKey(d => d.AccountTypeId);

                entity.HasOne(d => d.Oc)
                    .WithMany(p => p.Account1s)
                    .HasForeignKey(d => d.Ocid);
            });

            modelBuilder.Entity<Account2Permission>(entity =>
            {
                entity.ToTable("Account2Permission");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<AccountGroup>(entity =>
            {
                entity.ToTable("Account_Group");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BuildingId)
                    .HasColumnName("Building_ID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .HasColumnName("Group_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.GroupNo)
                    .HasColumnName("Group_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("Zone_ID")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<AccountPermission>(entity =>
            {
                entity.ToTable("Account_Permission");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.PermissionName)
                    .HasColumnName("Permission_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.PermissionNo)
                    .HasColumnName("Permission_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.Sort)
                    .HasColumnName("SORT")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<AccountRole>(entity =>
            {
                entity.ToTable("AccountRole");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountGuid).HasMaxLength(40);

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CodeNO")
                    .HasMaxLength(25);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountRoles)
                    .HasForeignKey(d => d.AccountId);
            });

            modelBuilder.Entity<AccountSite>(entity =>
            {
                entity.ToTable("AccountSite");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGuid)
                    .HasColumnName("ACCOUNT_GUID")
                    .HasMaxLength(50);

                entity.Property(e => e.SiteGuid)
                    .HasColumnName("SITE_GUID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AccountType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetRoleClaim>(entity =>
            {
                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaim>(entity =>
            {
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<Booking>(entity =>
            {
                entity.ToTable("Booking");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ChantingType)
                    .HasColumnName("Chanting_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuneralDirector)
                    .HasColumnName("Funeral_Director")
                    .HasMaxLength(40);

                entity.Property(e => e.FuneralMemo)
                    .HasColumnName("Funeral_Memo")
                    .HasColumnType("ntext");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.HallGuid)
                    .HasColumnName("Hall_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.HallType)
                    .HasColumnName("Hall_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.HouseMonk).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InOut).HasMaxLength(20);

                entity.Property(e => e.MageMemo).HasMaxLength(200);

                entity.Property(e => e.MageMoney).HasMaxLength(200);

                entity.Property(e => e.MageMonk).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Offerings).HasMaxLength(20);

                entity.Property(e => e.OrderDate)
                    .HasColumnName("Order_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderMeal).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.OrderName)
                    .HasColumnName("Order_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.OrderNo)
                    .HasColumnName("Order_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.PrepareFloral)
                    .HasColumnName("Prepare_Floral")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareFlower)
                    .HasColumnName("Prepare_Flower")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareFruit)
                    .HasColumnName("Prepare_Fruit")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareRice)
                    .HasColumnName("Prepare_Rice")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareTea)
                    .HasColumnName("Prepare_Tea")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareVegetarian)
                    .HasColumnName("Prepare_Vegetarian")
                    .HasMaxLength(20);

                entity.Property(e => e.RoomGuid)
                    .HasColumnName("Room_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.RoomType)
                    .HasColumnName("Room_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.SiteGuid)
                    .HasColumnName("Site_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderGuid)
                    .HasColumnName("WorkOrder_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Booking2Time>(entity =>
            {
                entity.ToTable("Booking2Time");

                entity.HasIndex(e => e.BookingGuid)
                    .HasName("NonClusteredIndex-20220928-200425");

                entity.HasIndex(e => e.CodeNo)
                    .HasName("NonClusteredIndex-20221017-CODE_NO");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BookingGuid)
                    .HasColumnName("Booking_Guid")
                    .HasMaxLength(40);

                entity.Property(e => e.BookingTime)
                    .HasColumnName("Booking_Time")
                    .HasMaxLength(20);

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<BookingDetail>(entity =>
            {
                entity.ToTable("BookingDetail");

                entity.HasIndex(e => e.Guid)
                    .HasName("NonClusteredIndex-20220928-GUID");

                entity.HasIndex(e => new { e.StartDate, e.EndDate })
                    .HasName("NonClusteredIndex-20220928-StartDate_EndDate");

                entity.HasIndex(e => new { e.SiteGuid, e.HallGuid, e.RoomGuid })
                    .HasName("NonClusteredIndex-20220928-SiteHallRoom");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Alternate).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BookingDate)
                    .HasColumnName("Booking_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.BookingGuid)
                    .HasColumnName("Booking_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.BookingTimeE)
                    .HasColumnName("Booking_TimeE")
                    .HasMaxLength(10);

                entity.Property(e => e.BookingTimeS)
                    .HasColumnName("Booking_TimeS")
                    .HasMaxLength(10);

                entity.Property(e => e.ChantingType)
                    .HasColumnName("Chanting_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailDate)
                    .HasColumnName("Email_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FarewellDate)
                    .HasColumnName("Farewell_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FarewellHomeTime)
                    .HasColumnName("Farewell_HomeTime")
                    .HasMaxLength(100);

                entity.Property(e => e.FarewellPublicTime)
                    .HasColumnName("Farewell_PublicTime")
                    .HasMaxLength(100);

                entity.Property(e => e.FuneralDirector)
                    .HasColumnName("Funeral_Director")
                    .HasMaxLength(40);

                entity.Property(e => e.FuneralMemo)
                    .HasColumnName("Funeral_Memo")
                    .HasColumnType("ntext");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.HallGuid)
                    .HasColumnName("Hall_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.HallType)
                    .HasColumnName("Hall_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.HouseMonk).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InOut).HasMaxLength(20);

                entity.Property(e => e.LeaveTime)
                    .HasColumnName("Leave_Time")
                    .HasMaxLength(40);

                entity.Property(e => e.MageMemo).HasMaxLength(200);

                entity.Property(e => e.MageMoney).HasMaxLength(200);

                entity.Property(e => e.MageMonk).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Offerings).HasMaxLength(20);

                entity.Property(e => e.OrderDate)
                    .HasColumnName("Order_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderMeal).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.OrderName)
                    .HasColumnName("Order_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.OrderNo)
                    .HasColumnName("Order_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentGuid)
                    .HasColumnName("Parent_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.PrepareFloral)
                    .HasColumnName("Prepare_Floral")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareFlower)
                    .HasColumnName("Prepare_Flower")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareFruit)
                    .HasColumnName("Prepare_Fruit")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareRice)
                    .HasColumnName("Prepare_Rice")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareTea)
                    .HasColumnName("Prepare_Tea")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareVegetarian)
                    .HasColumnName("Prepare_Vegetarian")
                    .HasMaxLength(20);

                entity.Property(e => e.RoomGuid)
                    .HasColumnName("Room_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.RoomType)
                    .HasColumnName("Room_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceMemo)
                    .HasColumnName("Service_Memo")
                    .HasColumnType("ntext");

                entity.Property(e => e.ServiceStaff)
                    .HasColumnName("Service_Staff")
                    .HasMaxLength(40);

                entity.Property(e => e.SiteGuid)
                    .HasColumnName("Site_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderGuid)
                    .HasColumnName("WorkOrder_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<BookingFruit>(entity =>
            {
                entity.ToTable("BookingFruit");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGuid)
                    .HasColumnName("ACCOUNT_GUID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FruitDate)
                    .HasColumnName("Fruit_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrepareFlower)
                    .HasColumnName("Prepare_Flower")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareFruit)
                    .HasColumnName("Prepare_Fruit")
                    .HasMaxLength(200);

                entity.Property(e => e.PrepareRice)
                    .HasColumnName("Prepare_Rice")
                    .HasMaxLength(20);

                entity.Property(e => e.PrepareTea)
                    .HasColumnName("Prepare_Tea")
                    .HasMaxLength(200);

                entity.Property(e => e.PrepareVegetarian)
                    .HasColumnName("Prepare_Vegetarian")
                    .HasMaxLength(20);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<BookingTypeC>(entity =>
            {
                entity.ToTable("BookingTypeC");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGuid)
                    .HasColumnName("ACCOUNT_GUID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ChantingDate)
                    .HasColumnName("Chanting_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ChantingType)
                    .HasColumnName("Chanting_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.HouseMonk).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InOut).HasMaxLength(20);

                entity.Property(e => e.MageMemo).HasMaxLength(200);

                entity.Property(e => e.MageMoney).HasMaxLength(200);

                entity.Property(e => e.MageMonk).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Offerings).HasMaxLength(20);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<CodeHelp>(entity =>
            {
                entity.ToTable("CODE_HELP");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeNameCn)
                    .HasColumnName("CODE_NAME_CN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameEn)
                    .HasColumnName("CODE_NAME_EN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameVn)
                    .HasColumnName("CODE_NAME_VN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25);

                entity.Property(e => e.CodeType)
                    .HasColumnName("CODE_TYPE")
                    .HasMaxLength(25);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("text");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CodePermission>(entity =>
            {
                entity.ToTable("CODE_Permission");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeName)
                    .HasColumnName("CODE_NAME")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameCn)
                    .HasColumnName("CODE_NAME_CN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameEn)
                    .HasColumnName("CODE_NAME_EN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameVn)
                    .HasColumnName("CODE_NAME_VN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25);

                entity.Property(e => e.CodeType)
                    .HasColumnName("CODE_TYPE")
                    .HasMaxLength(25);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("text");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CodePermission1>(entity =>
            {
                entity.ToTable("CodePermission");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CodeNameCn)
                    .HasColumnName("CodeNameCN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameEn)
                    .HasColumnName("CodeNameEN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameVn)
                    .HasColumnName("CodeNameVN")
                    .HasMaxLength(255);

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.Name).HasMaxLength(20);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasMaxLength(20);

                entity.Property(e => e.Type).HasMaxLength(25);
            });

            modelBuilder.Entity<CodeServiceType>(entity =>
            {
                entity.ToTable("CODE_ServiceType");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeName)
                    .HasColumnName("CODE_NAME")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("text");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CodeType>(entity =>
            {
                entity.ToTable("CODE_TYPE");

                entity.HasIndex(e => new { e.CodeType1, e.CodeNo })
                    .HasName("NonClusteredIndex-20220928-200450");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeName)
                    .HasColumnName("CODE_NAME")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameCn)
                    .HasColumnName("CODE_NAME_CN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameEn)
                    .HasColumnName("CODE_NAME_EN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNameVn)
                    .HasColumnName("CODE_NAME_VN")
                    .HasMaxLength(255);

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25);

                entity.Property(e => e.CodeType1)
                    .HasColumnName("CODE_TYPE")
                    .HasMaxLength(25);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.StoreId).HasColumnName("Store_id");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.WebSiteId)
                    .HasColumnName("WebSite_ID")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CodeType1>(entity =>
            {
                entity.ToTable("CodeType");

                entity.Property(e => e.Code).HasMaxLength(500);

                entity.Property(e => e.CodeName2).HasMaxLength(500);

                entity.Property(e => e.CodeName3).HasMaxLength(500);

                entity.Property(e => e.CodeName4).HasMaxLength(500);

                entity.Property(e => e.CodeNameEn)
                    .HasColumnName("CodeNameEN")
                    .HasMaxLength(500);

                entity.Property(e => e.CodeNameTw)
                    .HasColumnName("CodeNameTW")
                    .HasMaxLength(500);

                entity.Property(e => e.CodeNo).HasMaxLength(500);

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DeleteBy).HasMaxLength(500);

                entity.Property(e => e.DeleteDatetime).HasMaxLength(500);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(500);

                entity.Property(e => e.InsertBy).HasMaxLength(500);

                entity.Property(e => e.InsertDatetime).HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(500);

                entity.Property(e => e.UpdateBy).HasMaxLength(500);

                entity.Property(e => e.UpdateDatetime).HasMaxLength(500);
            });

            modelBuilder.Entity<County>(entity =>
            {
                entity.ToTable("COUNTY");

                entity.Property(e => e.CountyId)
                    .HasColumnName("COUNTY_ID")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("縣市代號");

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1)
                    .HasComment("刪除旗標；Y -刪除,N - 未刪除");

                entity.Property(e => e.Cmt)
                    .HasColumnName("CMT")
                    .HasMaxLength(255)
                    .HasComment("備註");

                entity.Property(e => e.CountyName)
                    .HasColumnName("COUNTY_NAME")
                    .HasMaxLength(255)
                    .HasComment("縣市名稱");

                entity.Property(e => e.CountyNameOld)
                    .HasColumnName("COUNTY_NAME_OLD")
                    .HasMaxLength(255)
                    .HasComment("舊縣市名稱");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)")
                    .HasComment(" 建立人員");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime")
                    .HasComment("建立日期");

                entity.Property(e => e.SigningId)
                    .HasColumnName("SIGNING_ID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)")
                    .HasComment(" 更新人員");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime")
                    .HasComment(" 更新日期");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.HasIndex(e => e.CustomerNo)
                    .HasName("NonClusteredIndex-Customer_NO")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.ContactEmail)
                    .HasColumnName("Contact_EMAIL")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactMobile)
                    .HasColumnName("Contact_MOBILE")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactName)
                    .HasColumnName("Contact_Name")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactTel)
                    .HasColumnName("Contact_TEL")
                    .HasMaxLength(20);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerAddress)
                    .HasColumnName("Customer_ADDRESS")
                    .HasMaxLength(100);

                entity.Property(e => e.CustomerBirthday)
                    .HasColumnName("Customer_BIRTHDAY")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerEmail)
                    .HasColumnName("Customer_EMAIL")
                    .HasMaxLength(100);

                entity.Property(e => e.CustomerIdcard)
                    .HasColumnName("Customer_IDCARD")
                    .HasMaxLength(20);

                entity.Property(e => e.CustomerMobile)
                    .HasColumnName("Customer_MOBILE")
                    .HasMaxLength(20);

                entity.Property(e => e.CustomerName)
                    .HasColumnName("Customer_NAME")
                    .HasMaxLength(100);

                entity.Property(e => e.CustomerNickname)
                    .HasColumnName("Customer_NICKNAME")
                    .HasMaxLength(20);

                entity.Property(e => e.CustomerNo)
                    .HasColumnName("Customer_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.CustomerSex)
                    .HasColumnName("Customer_SEX")
                    .HasMaxLength(1);

                entity.Property(e => e.CustomerTel)
                    .HasColumnName("Customer_TEL")
                    .HasMaxLength(20);

                entity.Property(e => e.FarmGuid)
                    .HasColumnName("Farm_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.HallGuid)
                    .HasColumnName("Hall_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Dashboard>(entity =>
            {
                entity.ToTable("Dashboard");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AreaName)
                    .HasColumnName("Area_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.AreaNo)
                    .HasColumnName("Area_No")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BackGroundColor).HasMaxLength(100);

                entity.Property(e => e.ChartTitle)
                    .HasColumnName("Chart_Title")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DashBoardName)
                    .HasColumnName("DashBoard_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.DashBoardNo)
                    .HasColumnName("DashBoard_No")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FarmGuid)
                    .HasColumnName("Farm_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ItemCode)
                    .HasColumnName("Item_Code")
                    .HasMaxLength(100);

                entity.Property(e => e.ItemName)
                    .HasColumnName("Item_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ItemType)
                    .HasColumnName("Item_Type")
                    .HasMaxLength(100);

                entity.Property(e => e.LangId)
                    .HasColumnName("LangID")
                    .HasMaxLength(10);

                entity.Property(e => e.SortId)
                    .HasColumnName("Sort_ID")
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Text01).HasMaxLength(100);

                entity.Property(e => e.Text02).HasMaxLength(100);

                entity.Property(e => e.Text03).HasMaxLength(100);

                entity.Property(e => e.Text04).HasMaxLength(100);

                entity.Property(e => e.Text05).HasMaxLength(100);

                entity.Property(e => e.Text06).HasMaxLength(100);

                entity.Property(e => e.Text07).HasMaxLength(100);

                entity.Property(e => e.Text08).HasMaxLength(100);

                entity.Property(e => e.Text09).HasMaxLength(100);

                entity.Property(e => e.Text10).HasMaxLength(100);

                entity.Property(e => e.TextColor01).HasMaxLength(100);

                entity.Property(e => e.TextColor02).HasMaxLength(100);

                entity.Property(e => e.TextColor03).HasMaxLength(100);

                entity.Property(e => e.TextColor04).HasMaxLength(100);

                entity.Property(e => e.TextColor05).HasMaxLength(100);

                entity.Property(e => e.TextColor06).HasMaxLength(100);

                entity.Property(e => e.TextColor07).HasMaxLength(100);

                entity.Property(e => e.TextColor08).HasMaxLength(100);

                entity.Property(e => e.TextColor09).HasMaxLength(100);

                entity.Property(e => e.TextColor10).HasMaxLength(100);

                entity.Property(e => e.Type).HasMaxLength(100);

                entity.Property(e => e.UpperArea)
                    .HasColumnName("Upper_Area")
                    .HasMaxLength(40);

                entity.Property(e => e.UpperDashBoard)
                    .HasColumnName("Upper_DashBoard")
                    .HasMaxLength(40);

                entity.Property(e => e.Value01).HasMaxLength(100);

                entity.Property(e => e.Value02).HasMaxLength(100);

                entity.Property(e => e.Value03).HasMaxLength(100);

                entity.Property(e => e.Value04).HasMaxLength(100);

                entity.Property(e => e.Value05).HasMaxLength(100);

                entity.Property(e => e.Value06).HasMaxLength(100);

                entity.Property(e => e.Value07).HasMaxLength(100);

                entity.Property(e => e.Value08).HasMaxLength(100);

                entity.Property(e => e.Value09).HasMaxLength(100);

                entity.Property(e => e.Value10).HasMaxLength(100);

                entity.Property(e => e.ValueColor01).HasMaxLength(100);

                entity.Property(e => e.ValueColor02).HasMaxLength(100);

                entity.Property(e => e.ValueColor03).HasMaxLength(100);

                entity.Property(e => e.ValueColor04).HasMaxLength(100);

                entity.Property(e => e.ValueColor05).HasMaxLength(100);

                entity.Property(e => e.ValueColor06).HasMaxLength(100);

                entity.Property(e => e.ValueColor07).HasMaxLength(100);

                entity.Property(e => e.ValueColor08).HasMaxLength(100);

                entity.Property(e => e.ValueColor09).HasMaxLength(100);

                entity.Property(e => e.ValueColor10).HasMaxLength(100);
            });

            modelBuilder.Entity<DbPublicCodeType>(entity =>
            {
                entity.ToTable("dbPublic_Code_Type");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodeNo)
                    .HasColumnName("Code_NO")
                    .HasMaxLength(40);

                entity.Property(e => e.CodeType)
                    .HasColumnName("Code_Type")
                    .HasMaxLength(40);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Temp).HasColumnName("temp");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicContact>(entity =>
            {
                entity.ToTable("dbPublic_Contact");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1);

                entity.Property(e => e.ContactAddress)
                    .HasColumnName("Contact_Address")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactDepartment)
                    .HasColumnName("Contact_Department")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactEmail)
                    .HasColumnName("Contact_Email")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactFax)
                    .HasColumnName("Contact_Fax")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactJobTitle)
                    .HasColumnName("Contact_JobTitle")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactMobile)
                    .HasColumnName("Contact_Mobile")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactName)
                    .HasColumnName("Contact_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactNameEn)
                    .HasColumnName("Contact_Name_EN")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactNo)
                    .HasColumnName("Contact_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactTel)
                    .HasColumnName("Contact_Tel")
                    .HasMaxLength(20);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Memo).HasColumnType("ntext");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicCountyTownShip>(entity =>
            {
                entity.ToTable("dbPublic_CountyTownShip");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CountyId)
                    .HasColumnName("County_ID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.TownShipId)
                    .HasColumnName("TownShip_ID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicFavorite>(entity =>
            {
                entity.ToTable("dbPublic_Favorite");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGuid)
                    .HasColumnName("ACCOUNT_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicMemo>(entity =>
            {
                entity.ToTable("dbPublic_Memo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Memo).HasColumnType("ntext");

                entity.Property(e => e.MemoDate)
                    .HasColumnName("Memo_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MemoProject)
                    .HasColumnName("Memo_Project")
                    .HasMaxLength(100);

                entity.Property(e => e.MemoYearsEnd)
                    .HasColumnName("Memo_Years_End")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MemoYearsStart)
                    .HasColumnName("Memo_Years_Start")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TempFlag)
                    .HasColumnName("TEMP_Flag")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicNurse>(entity =>
            {
                entity.ToTable("dbPublic_Nurse");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.NurseGuid)
                    .HasColumnName("Nurse_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicPatient>(entity =>
            {
                entity.ToTable("dbPublic_Patient");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PatientGuid)
                    .HasColumnName("Patient_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicPaymentCode>(entity =>
            {
                entity.ToTable("dbPublic_PaymentCode");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGuid)
                    .HasColumnName("ACCOUNT_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PaymentCode).HasMaxLength(10);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicPhoto>(entity =>
            {
                entity.ToTable("dbPublic_Photo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PhotoPath)
                    .HasColumnName("Photo_Path")
                    .HasMaxLength(100);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicReaded>(entity =>
            {
                entity.ToTable("dbPublic_Readed");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGuid)
                    .HasColumnName("ACCOUNT_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<DbPublicWebPrint>(entity =>
            {
                entity.ToTable("dbPublic_WebPrint");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasMaxLength(20);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<EmailPool>(entity =>
            {
                entity.ToTable("Email_Pool");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FromEmail).HasMaxLength(200);

                entity.Property(e => e.FromName).HasMaxLength(200);

                entity.Property(e => e.SendBy)
                    .HasColumnName("SEND_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SendDate1)
                    .HasColumnName("SEND_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Senddate)
                    .HasColumnName("SENDDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sendto)
                    .HasColumnName("SENDTO")
                    .HasMaxLength(200);

                entity.Property(e => e.Sendtobcc)
                    .HasColumnName("SENDTOBCC")
                    .HasMaxLength(200);

                entity.Property(e => e.Sendtocc)
                    .HasColumnName("SENDTOCC")
                    .HasMaxLength(200);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Subject).HasMaxLength(200);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasIndex(e => e.No)
                    .HasName("NonClusteredIndex-Employee_NO")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.AddressDomicile).HasMaxLength(100);

                entity.Property(e => e.BirthDay).HasColumnType("datetime");

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.ContactName).HasMaxLength(100);

                entity.Property(e => e.ContactTel).HasMaxLength(20);

                entity.Property(e => e.CreateBy).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DeleteBy).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FarmGuid)
                    .HasColumnName("Farm_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Idcard)
                    .HasColumnName("IDCard")
                    .HasMaxLength(20);

                entity.Property(e => e.Level).HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.Name).HasMaxLength(10);

                entity.Property(e => e.NickName).HasMaxLength(20);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasMaxLength(20);

                entity.Property(e => e.Sex).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Unit).HasMaxLength(100);

                entity.Property(e => e.UpdateBy).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Hall>(entity =>
            {
                entity.ToTable("Hall");

                entity.HasIndex(e => e.Guid)
                    .HasName("NonClusteredIndex-20220928-GUID");

                entity.HasIndex(e => new { e.SiteGuid, e.Status })
                    .HasName("NonClusteredIndex-20220928-SiteStatus");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.HallName)
                    .HasColumnName("Hall_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.HallNo)
                    .HasColumnName("Hall_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.SiteGuid)
                    .HasColumnName("Site_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Type).HasMaxLength(20);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Vip)
                    .HasColumnName("VIP")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<HallTime>(entity =>
            {
                entity.ToTable("Hall_Time");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.End).HasMaxLength(100);

                entity.Property(e => e.HallGuid)
                    .HasColumnName("Hall_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.SiteGuid)
                    .HasColumnName("Site_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Start).HasMaxLength(100);
            });

            modelBuilder.Entity<Method>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<MultiChoiceCountyTownShip>(entity =>
            {
                entity.ToTable("MultiChoice_CountyTownShip");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CountyId)
                    .HasColumnName("County_ID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.TownShipId)
                    .HasColumnName("TownShip_ID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<MultiChoiceCountyTownShip1>(entity =>
            {
                entity.ToTable("MultiChoiceCountyTownShip");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountGuid).HasMaxLength(40);

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.TownShipId).HasColumnName("TownShipID");

                entity.Property(e => e.UpperGuid).HasMaxLength(40);
            });

            modelBuilder.Entity<MultiChoicePaymentCode>(entity =>
            {
                entity.ToTable("MultiChoice_PaymentCode");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<Oc>(entity =>
            {
                entity.ToTable("OC");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.Ggp).HasColumnName("GGP");

                entity.Property(e => e.Gp).HasColumnName("GP");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Pmpf).HasColumnName("PMPF");

                entity.Property(e => e.Principal).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(20);
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.ToTable("Organization");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("text");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.OrganizationAddress)
                    .HasColumnName("Organization_ADDRESS")
                    .HasMaxLength(100);

                entity.Property(e => e.OrganizationEmail)
                    .HasColumnName("Organization_EMAIL")
                    .HasMaxLength(100);

                entity.Property(e => e.OrganizationMobile)
                    .HasColumnName("Organization_MOBILE")
                    .HasMaxLength(20);

                entity.Property(e => e.OrganizationName)
                    .HasColumnName("Organization_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.OrganizationNo)
                    .HasColumnName("Organization_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.OrganizationPrincipal)
                    .HasColumnName("Organization_Principal")
                    .HasMaxLength(200);

                entity.Property(e => e.OrganizationTel)
                    .HasColumnName("Organization_TEL")
                    .HasMaxLength(20);

                entity.Property(e => e.OrganizationUrl)
                    .HasColumnName("Organization_URL")
                    .HasMaxLength(100);

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasMaxLength(20);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Pricing>(entity =>
            {
                entity.ToTable("Pricing");

                entity.Property(e => e.ContentEn)
                    .IsRequired()
                    .HasColumnName("ContentEN")
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.ContentVi)
                    .IsRequired()
                    .HasColumnName("ContentVI")
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.ContentZh)
                    .IsRequired()
                    .HasColumnName("ContentZH");
            });

            modelBuilder.Entity<PublicCodeType>(entity =>
            {
                entity.ToTable("PublicCodeType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CancelFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PublicCountyTownShip>(entity =>
            {
                entity.ToTable("PublicCountyTownShip");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CancelFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Guid).HasMaxLength(40);

                entity.Property(e => e.TownShip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpperGuid).HasMaxLength(40);
            });

            modelBuilder.Entity<PublicMemo>(entity =>
            {
                entity.ToTable("PublicMemo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.CancelFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Guid).HasMaxLength(40);

                entity.Property(e => e.Memo).HasColumnType("ntext");

                entity.Property(e => e.MemoProject).HasMaxLength(40);

                entity.Property(e => e.PaymentCode).HasMaxLength(40);

                entity.Property(e => e.TempFlag).HasColumnName("Temp_Flag");

                entity.Property(e => e.UpperGuid).HasMaxLength(40);
            });

            modelBuilder.Entity<PublicPaymentCode>(entity =>
            {
                entity.ToTable("PublicPaymentCode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountGuid).HasMaxLength(40);

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.PaymentCode).HasMaxLength(40);

                entity.Property(e => e.UpperGuid).HasMaxLength(40);
            });

            modelBuilder.Entity<PublicReaded>(entity =>
            {
                entity.ToTable("PublicReaded");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountGuid).HasMaxLength(40);

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.UpperGuid).HasMaxLength(40);
            });

            modelBuilder.Entity<RefreshToken>(entity =>
            {
                entity.HasKey(e => e.Token);

                entity.Property(e => e.AccountId).HasColumnName("AccountID");
            });

            modelBuilder.Entity<ReportConfig>(entity =>
            {
                entity.ToTable("Report_Config");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnWidth).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Comment).HasMaxLength(100);

                entity.Property(e => e.Paddingbottom)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Paddingleft)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Paddingright)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Paddingtop)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Sequence).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Slcn)
                    .HasColumnName("SLCN")
                    .HasMaxLength(500);

                entity.Property(e => e.Slen)
                    .HasColumnName("SLEN")
                    .HasMaxLength(500);

                entity.Property(e => e.Slkey)
                    .HasColumnName("SLKey")
                    .HasMaxLength(50);

                entity.Property(e => e.Slpage)
                    .HasColumnName("SLPage")
                    .HasMaxLength(50);

                entity.Property(e => e.Sltw)
                    .HasColumnName("SLTW")
                    .HasMaxLength(500);

                entity.Property(e => e.Sltype)
                    .HasColumnName("SLType")
                    .HasMaxLength(50);

                entity.Property(e => e.Slvn)
                    .HasColumnName("SLVN")
                    .HasMaxLength(500);

                entity.Property(e => e.SystemMenuGuid).HasMaxLength(40);

                entity.Property(e => e.TextAlign).HasMaxLength(10);
            });

            modelBuilder.Entity<Room>(entity =>
            {
                entity.ToTable("Room");

                entity.HasIndex(e => e.Guid)
                    .HasName("NonClusteredIndex-20220928-GUID");

                entity.HasIndex(e => new { e.SiteGuid, e.HallGuid, e.Status })
                    .HasName("NonClusteredIndex-20220928-SiteHallStatus");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.HallGuid)
                    .HasColumnName("Hall_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Price).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PriceMember)
                    .HasColumnName("Price_Member")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PriceSpecial)
                    .HasColumnName("Price_Special")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RoomDescript)
                    .HasColumnName("Room_Descript")
                    .HasMaxLength(2000);

                entity.Property(e => e.RoomLocation)
                    .HasColumnName("Room_Location")
                    .HasMaxLength(20);

                entity.Property(e => e.RoomName)
                    .HasColumnName("Room_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.RoomNo)
                    .HasColumnName("Room_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.RoomPhoto)
                    .HasColumnName("Room_Photo")
                    .HasMaxLength(200);

                entity.Property(e => e.RoomPhoto1)
                    .HasColumnName("Room_Photo1")
                    .HasMaxLength(200);

                entity.Property(e => e.RoomPhoto2)
                    .HasColumnName("Room_Photo2")
                    .HasMaxLength(200);

                entity.Property(e => e.RoomPhoto3)
                    .HasColumnName("Room_Photo3")
                    .HasMaxLength(200);

                entity.Property(e => e.RoomPhoto4)
                    .HasColumnName("Room_Photo4")
                    .HasMaxLength(200);

                entity.Property(e => e.RoomPhoto5)
                    .HasColumnName("Room_Photo5")
                    .HasMaxLength(200);

                entity.Property(e => e.RoomSize)
                    .HasColumnName("Room_Size")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SiteGuid)
                    .HasColumnName("Site_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.SortId)
                    .HasColumnName("SORT_ID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Type).HasMaxLength(20);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Site>(entity =>
            {
                entity.ToTable("Site");

                entity.HasIndex(e => e.Guid)
                    .HasName("NonClusteredIndex-20220928-GUID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.SiteLocation)
                    .HasColumnName("Site_Location")
                    .HasMaxLength(20);

                entity.Property(e => e.SiteName)
                    .HasColumnName("Site_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.SiteName2)
                    .HasColumnName("Site_Name2")
                    .HasMaxLength(200);

                entity.Property(e => e.SiteNo)
                    .HasColumnName("Site_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.SitePhoto)
                    .HasColumnName("Site_Photo")
                    .HasMaxLength(100);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Type).HasMaxLength(20);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<StoredProcedure>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Color).HasMaxLength(20);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Legend).HasMaxLength(200);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StoredName)
                    .HasColumnName("Stored_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.StoredType)
                    .HasColumnName("Stored_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.SystemMenuGuid).HasMaxLength(40);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<SysConfig>(entity =>
            {
                entity.ToTable("SYS_CONFIG");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.ConfigNo)
                    .HasColumnName("CONFIG_NO")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ConfigType)
                    .HasColumnName("CONFIG_TYPE")
                    .HasMaxLength(25);

                entity.Property(e => e.ConfigValue)
                    .HasColumnName("CONFIG_VALUE")
                    .HasMaxLength(255);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FarmGuid)
                    .HasColumnName("Farm_GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<SysLogDuty>(entity =>
            {
                entity.ToTable("SYS_LOG_Duty");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Date)
                    .HasColumnName("DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(16);

                entity.Property(e => e.Time)
                    .HasColumnName("TIME")
                    .HasMaxLength(10);

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasMaxLength(30);

                entity.Property(e => e.Wip)
                    .HasColumnName("WIP")
                    .HasMaxLength(16);
            });

            modelBuilder.Entity<SysLogGp>(entity =>
            {
                entity.ToTable("SYS_LOG_GPS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(30)
                    .IsFixedLength();

                entity.Property(e => e.CallBy)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(16);

                entity.Property(e => e.Lat)
                    .HasColumnName("LAT")
                    .HasMaxLength(20);

                entity.Property(e => e.Lng)
                    .HasColumnName("LNG")
                    .HasMaxLength(20);

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasMaxLength(10);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Wip)
                    .HasColumnName("WIP")
                    .HasMaxLength(16);
            });

            modelBuilder.Entity<SysLogSp>(entity =>
            {
                entity.HasKey(e => e.SluId)
                    .HasName("PK__SYS_LOG_SP");

                entity.ToTable("SYS_LOG_SP");

                entity.Property(e => e.SluId)
                    .HasColumnName("SLU_ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SluDate)
                    .HasColumnName("SLU_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.SluSp)
                    .HasColumnName("SLU_SP")
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<SysLogUser>(entity =>
            {
                entity.HasKey(e => e.SluId)
                    .HasName("PK__SYS_LOG_USER__22");

                entity.ToTable("SYS_LOG_USER");

                entity.Property(e => e.SluId)
                    .HasColumnName("SLU_ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SluDate)
                    .HasColumnName("SLU_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.SluFid)
                    .HasColumnName("SLU_FID")
                    .HasMaxLength(10);

                entity.Property(e => e.SluFunction).HasColumnName("SLU_FUNCTION");

                entity.Property(e => e.SluIp)
                    .HasColumnName("SLU_IP")
                    .HasMaxLength(16);

                entity.Property(e => e.SluModule)
                    .HasColumnName("SLU_MODULE")
                    .HasMaxLength(50);

                entity.Property(e => e.SluPage)
                    .HasColumnName("SLU_PAGE")
                    .HasMaxLength(50);

                entity.Property(e => e.SluSql).HasColumnName("SLU_SQL");

                entity.Property(e => e.SluText).HasColumnName("SLU_TEXT");

                entity.Property(e => e.SluTime)
                    .HasColumnName("SLU_TIME")
                    .HasMaxLength(10);

                entity.Property(e => e.SluType)
                    .HasColumnName("SLU_TYPE")
                    .HasMaxLength(30);

                entity.Property(e => e.SluUid)
                    .HasColumnName("SLU_UID")
                    .HasMaxLength(10);

                entity.Property(e => e.SluUrl).HasColumnName("SLU_URL");

                entity.Property(e => e.WebBuildingId)
                    .HasColumnName("WebBuilding_ID")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SysMenu>(entity =>
            {
                entity.ToTable("SYS_MENU");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1);

                entity.Property(e => e.ChartName)
                    .HasColumnName("Chart_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartNameCn)
                    .HasColumnName("Chart_NameCn")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartNameEn)
                    .HasColumnName("Chart_NameEn")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartNameVn)
                    .HasColumnName("Chart_NameVn")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartUnit)
                    .HasColumnName("Chart_Unit")
                    .HasMaxLength(20);

                entity.Property(e => e.ChartXaxisName)
                    .HasColumnName("Chart_XAxisName")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartXaxisNameCn)
                    .HasColumnName("Chart_XAxisNameCn")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartXaxisNameEn)
                    .HasColumnName("Chart_XAxisNameEn")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartXaxisNameVn)
                    .HasColumnName("Chart_XAxisNameVn")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartYaxisName)
                    .HasColumnName("Chart_YAxisName")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartYaxisNameCn)
                    .HasColumnName("Chart_YAxisNameCn")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartYaxisNameEn)
                    .HasColumnName("Chart_YAxisNameEn")
                    .HasMaxLength(200);

                entity.Property(e => e.ChartYaxisNameVn)
                    .HasColumnName("Chart_YAxisNameVn")
                    .HasMaxLength(200);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("text");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FarmGgp)
                    .HasColumnName("Farm_GGP")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FarmGp)
                    .HasColumnName("Farm_GP")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FarmGrower)
                    .HasColumnName("Farm_GROWER")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FarmNursery)
                    .HasColumnName("Farm_NURSERY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FarmPmpf)
                    .HasColumnName("Farm_PMPF")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FarmSemen)
                    .HasColumnName("Farm_SEMEN")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InFooter)
                    .HasColumnName("inFooter")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.InHeader)
                    .HasColumnName("inHeader")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.MenuIcon)
                    .HasColumnName("MenuICON")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuIcon1)
                    .HasColumnName("MenuICON-1")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuLink).HasMaxLength(200);

                entity.Property(e => e.MenuLinkEn)
                    .HasColumnName("MenuLink_EN")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuName).HasMaxLength(200);

                entity.Property(e => e.MenuNameCn)
                    .HasColumnName("MenuName_CN")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuNameEn)
                    .HasColumnName("MenuName_EN")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuNameVn)
                    .HasColumnName("MenuName_VN")
                    .HasMaxLength(200);

                entity.Property(e => e.ReportType)
                    .HasColumnName("Report_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.SortId)
                    .HasColumnName("SORT_ID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StoredProceduresName).HasMaxLength(200);

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasMaxLength(20);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperId)
                    .HasColumnName("UPPER_ID")
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WebPageGuid)
                    .HasColumnName("WebPage_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.WebPageGuidEn)
                    .HasColumnName("WebPage_GUID_EN")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<SystemConfig>(entity =>
            {
                entity.ToTable("SystemConfig");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountId)
                    .HasColumnName("AccountID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.CreateBy).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DeleteBy).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate).HasColumnType("datetime");

                entity.Property(e => e.Link).HasMaxLength(200);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasMaxLength(40);

                entity.Property(e => e.Sort).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Status).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Type).HasMaxLength(40);

                entity.Property(e => e.UpdateBy).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.Value).HasMaxLength(40);

                entity.Property(e => e.WebBuildingId)
                    .HasColumnName("WebBuildingID")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SystemConfig2>(entity =>
            {
                entity.ToTable("SystemConfig2");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.ConfigNo)
                    .HasColumnName("CONFIG_NO")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ConfigType)
                    .HasColumnName("CONFIG_TYPE")
                    .HasMaxLength(25);

                entity.Property(e => e.ConfigValue)
                    .HasColumnName("CONFIG_VALUE")
                    .HasMaxLength(255);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<SystemLanguage>(entity =>
            {
                entity.ToTable("SystemLanguage");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comment).HasMaxLength(100);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sequence).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Slcn)
                    .HasColumnName("SLCN")
                    .HasMaxLength(500);

                entity.Property(e => e.Slen)
                    .HasColumnName("SLEN")
                    .HasMaxLength(500);

                entity.Property(e => e.Slkey)
                    .HasColumnName("SLKey")
                    .HasMaxLength(50);

                entity.Property(e => e.Slpage)
                    .HasColumnName("SLPage")
                    .HasMaxLength(50);

                entity.Property(e => e.Sltw)
                    .HasColumnName("SLTW")
                    .HasMaxLength(500);

                entity.Property(e => e.Sltype)
                    .HasColumnName("SLType")
                    .HasMaxLength(50);

                entity.Property(e => e.Slvn)
                    .HasColumnName("SLVN")
                    .HasMaxLength(500);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SystemMenuGuid).HasMaxLength(40);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<SystemLogUser>(entity =>
            {
                entity.ToTable("SystemLogUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cn)
                    .HasColumnName("CN")
                    .HasMaxLength(500);

                entity.Property(e => e.Comment).HasMaxLength(100);

                entity.Property(e => e.En)
                    .HasColumnName("EN")
                    .HasMaxLength(500);

                entity.Property(e => e.Key).HasMaxLength(50);

                entity.Property(e => e.Page).HasMaxLength(50);

                entity.Property(e => e.Tw)
                    .HasColumnName("TW")
                    .HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Vn)
                    .HasColumnName("VN")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Township>(entity =>
            {
                entity.ToTable("TOWNSHIP");

                entity.Property(e => e.TownshipId)
                    .HasColumnName("TOWNSHIP_ID")
                    .HasMaxLength(60)
                    .HasComment("鄉鎮市區代號");

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1)
                    .HasComment("刪除旗標；Y -刪除,N - 未刪除");

                entity.Property(e => e.Cmt)
                    .HasColumnName("CMT")
                    .HasMaxLength(255)
                    .HasComment("備註");

                entity.Property(e => e.CountyId)
                    .HasColumnName("COUNTY_ID")
                    .HasMaxLength(60)
                    .HasComment("縣市代號");

                entity.Property(e => e.CountyIdOld)
                    .HasColumnName("COUNTY_ID_OLD")
                    .HasMaxLength(60)
                    .HasComment("舊縣市ID");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("建立人員");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime")
                    .HasComment("建立日期");

                entity.Property(e => e.MlsId)
                    .HasColumnName("MLS_ID")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TownshipName)
                    .HasColumnName("TOWNSHIP_NAME")
                    .HasMaxLength(255)
                    .HasComment("鄉鎮區名稱");

                entity.Property(e => e.TownshipNameOld)
                    .HasColumnName("TOWNSHIP_NAME_OLD")
                    .HasMaxLength(255)
                    .HasComment("舊行政區名稱");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("更新人員");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime")
                    .HasComment("更新日期");
            });

            modelBuilder.Entity<UserConfig>(entity =>
            {
                entity.ToTable("USER_CONFIG");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("text");

                entity.Property(e => e.ConfigNo)
                    .HasColumnName("CONFIG_NO")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ConfigType)
                    .HasColumnName("CONFIG_TYPE")
                    .HasMaxLength(25);

                entity.Property(e => e.ConfigValue)
                    .HasColumnName("CONFIG_VALUE")
                    .HasMaxLength(255);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FarmGuid)
                    .HasColumnName("Farm_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(1);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<UserView>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserView");

                entity.Property(e => e.Accountid)
                    .HasColumnName("accountid")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Deptid)
                    .HasColumnName("deptid")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Deptname)
                    .HasColumnName("deptname")
                    .HasMaxLength(80);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(50);

                entity.Property(e => e.InsDate)
                    .HasColumnName("ins_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsFuneralDirector)
                    .HasColumnName("is_FuneralDirector")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasColumnName("status_type")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Titlecaption)
                    .HasColumnName("titlecaption")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WebMenu>(entity =>
            {
                entity.ToTable("WebMenu");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1);

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("text");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InFooter)
                    .HasColumnName("inFooter")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.InHeader)
                    .HasColumnName("inHeader")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.MenuIcon)
                    .HasColumnName("MenuICON")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuIcon1)
                    .HasColumnName("MenuICON-1")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuLink).HasMaxLength(200);

                entity.Property(e => e.MenuLinkEn)
                    .HasColumnName("MenuLink_EN")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuName).HasMaxLength(200);

                entity.Property(e => e.MenuNameEn)
                    .HasColumnName("MenuName_EN")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuNameVn)
                    .HasColumnName("MenuName_VN")
                    .HasMaxLength(200);

                entity.Property(e => e.SortId)
                    .HasColumnName("SORT_ID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpperId)
                    .HasColumnName("UPPER_ID")
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WebPageGuid)
                    .HasColumnName("WebPage_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.WebPageGuidEn)
                    .HasColumnName("WebPage_GUID_EN")
                    .HasMaxLength(40);

                entity.Property(e => e.WebSiteId).HasColumnName("WebSite_id");
            });

            modelBuilder.Entity<WorkOrder>(entity =>
            {
                entity.ToTable("WorkOrder");

                entity.HasIndex(e => e.Guid)
                    .HasName("NonClusteredIndex-20220928-180709");

                entity.HasIndex(e => e.HallGuid)
                    .HasName("NonClusteredIndex-20220928-180436");

                entity.HasIndex(e => e.Status)
                    .HasName("NonClusteredIndex-20220928-180444");

                entity.HasIndex(e => e.WorkOrderNo)
                    .HasName("NonClusteredIndex-20220928-180426");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.HallGuid)
                    .HasColumnName("Hall_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderName)
                    .HasColumnName("WorkOrder_Name")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkOrderNo)
                    .HasColumnName("WorkOrder_NO")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<WorkOrder20220929>(entity =>
            {
                entity.ToTable("WorkOrder_20220929");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("ntext");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeleteBy)
                    .HasColumnName("DELETE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeleteDate)
                    .HasColumnName("DELETE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.HallGuid)
                    .HasColumnName("Hall_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderName)
                    .HasColumnName("WorkOrder_Name")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkOrderNo)
                    .HasColumnName("WorkOrder_NO")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<XAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("PK_Account_12");

                entity.ToTable("xAccount");

                entity.HasIndex(e => e.AccountNo)
                    .HasName("NonClusteredIndex-Account_NO")
                    .IsUnique();

                entity.HasIndex(e => e.Uid)
                    .HasName("NonClusteredIndex-Account_UID")
                    .IsUnique();

                entity.Property(e => e.AccountId)
                    .HasColumnName("Account_ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountAddress)
                    .HasColumnName("Account_ADDRESS")
                    .HasMaxLength(100);

                entity.Property(e => e.AccountBirthday)
                    .HasColumnName("Account_BIRTHDAY")
                    .HasColumnType("datetime");

                entity.Property(e => e.AccountDomicileAddress)
                    .HasColumnName("Account_Domicile_ADDRESS")
                    .HasMaxLength(100);

                entity.Property(e => e.AccountEmail)
                    .HasColumnName("Account_EMAIL")
                    .HasMaxLength(100);

                entity.Property(e => e.AccountGroup)
                    .HasColumnName("Account_Group")
                    .HasMaxLength(100);

                entity.Property(e => e.AccountIdcard)
                    .HasColumnName("Account_IDCARD")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountMobile)
                    .HasColumnName("Account_MOBILE")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountName)
                    .HasColumnName("Account_NAME")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountNickname)
                    .HasColumnName("Account_NICKNAME")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountNo)
                    .HasColumnName("Account_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountOrganization)
                    .HasColumnName("Account_Organization")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AccountRole)
                    .HasColumnName("Account_Role")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AccountSex)
                    .HasColumnName("Account_SEX")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountSite)
                    .HasColumnName("Account_Site")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AccountTel)
                    .HasColumnName("Account_TEL")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountType)
                    .HasColumnName("Account_Type")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1);

                entity.Property(e => e.ClinicId)
                    .HasColumnName("Clinic_ID")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmployeeGuid)
                    .HasColumnName("Employee_Guid")
                    .HasMaxLength(40);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ErrorLogin)
                    .HasColumnName("errorLogin")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FarmGuid)
                    .HasColumnName("FARM_GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastLoginDate)
                    .HasColumnName("LastLogin_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lastlogin)
                    .HasColumnName("lastlogin")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lastuse)
                    .HasColumnName("lastuse")
                    .HasColumnType("datetime");

                entity.Property(e => e.LocalLogin)
                    .HasColumnName("Local_Login")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PAccount)
                    .HasColumnName("P_Account")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PAdmin)
                    .HasColumnName("P_Admin")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PClinic)
                    .HasColumnName("P_Clinic")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PCodeType)
                    .HasColumnName("P_CodeType")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PEnquiry)
                    .HasColumnName("P_Enquiry")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PEnquiryResult)
                    .HasColumnName("P_Enquiry_Result")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PPatient)
                    .HasColumnName("P_Patient")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PPhotoComment)
                    .HasColumnName("P_PhotoComment")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PRequisitionConfirm)
                    .HasColumnName("P_RequisitionConfirm")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PageSizeSetting)
                    .HasColumnName("PageSize_Setting")
                    .HasMaxLength(10);

                entity.Property(e => e.PhotoPath)
                    .HasColumnName("Photo_Path")
                    .HasMaxLength(100);

                entity.Property(e => e.RoleId)
                    .HasColumnName("Role_ID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SiteGuid2)
                    .HasColumnName("SITE_GUID2")
                    .HasMaxLength(40);

                entity.Property(e => e.SiteGuid3)
                    .HasColumnName("SITE_GUID3")
                    .HasMaxLength(40);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Token)
                    .HasColumnName("token")
                    .HasMaxLength(100);

                entity.Property(e => e.TypeId)
                    .HasColumnName("Type_ID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Uid)
                    .HasColumnName("UID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upwd)
                    .HasColumnName("UPWD")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<XAccountGroup>(entity =>
            {
                entity.ToTable("xAccount_Group");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CancelFlag)
                    .HasColumnName("CANCEL_FLAG")
                    .HasMaxLength(1);

                entity.Property(e => e.CreateBy)
                    .HasColumnName("CREATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FarmGuid)
                    .HasColumnName("Farm_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.GroupName)
                    .HasColumnName("Group_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.GroupNo)
                    .HasColumnName("Group_NO")
                    .HasMaxLength(100);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(40)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.MobileMode)
                    .HasColumnName("MOBILE_MODE")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SeeAllSite)
                    .HasColumnName("SEE_ALL_SITE")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateBy)
                    .HasColumnName("UPDATE_BY")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<XAccountGroupPermission>(entity =>
            {
                entity.ToTable("xAccountGroup_Permission");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<XAccountPermission>(entity =>
            {
                entity.ToTable("xAccount_Permission");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25);

                entity.Property(e => e.UpperGuid)
                    .HasColumnName("UPPER_GUID")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<XAccountRole>(entity =>
            {
                entity.ToTable("xAccount_Role");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGuid)
                    .HasColumnName("Account_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.CodeNo)
                    .HasColumnName("CODE_NO")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<XAccountSetting>(entity =>
            {
                entity.ToTable("xAccount_Setting");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AccountGuid)
                    .HasColumnName("Account_GUID")
                    .HasMaxLength(40);

                entity.Property(e => e.ControllerName)
                    .HasColumnName("Controller_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.ControllerValue)
                    .HasColumnName("Controller_Value")
                    .HasMaxLength(200);

                entity.Property(e => e.Page).HasMaxLength(200);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}